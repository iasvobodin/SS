type FormData = {
  name: string;
  contact: string;
  message?: string;
  package?: string;
};

type TelegramResponse = {
  success: boolean;
  message: string;
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –≤ Telegram –±–æ—Ç
 */
export async function sendToTelegram(formData: FormData): Promise<TelegramResponse> {
  const BOT_TOKEN: string = import.meta.env.PUBLIC_TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN_HERE';
  const YOUR_USER_ID: string = import.meta.env.PUBLIC_TELEGRAM_CHAT_ID || 'YOUR_CHAT_ID_HERE';

  if (BOT_TOKEN === 'YOUR_BOT_TOKEN_HERE' || YOUR_USER_ID === 'YOUR_CHAT_ID_HERE') {
    console.warn('‚ö†Ô∏è Telegram bot credentials not configured! Check .env file.');
    if (import.meta.env.DEV) {
      console.log('üìã Form data that would be sent:', formData);
      return {
        success: true,
        message: '[DEV MODE] –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å)',
      };
    }
    return {
      success: false,
      message: 'Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: @svobodinaphoto',
    };
  }

  let messageText = 'üé® <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é!</b>\n\n';
  messageText += `üë§ <b>–ò–º—è:</b> ${escapeHtml(formData.name)}\n`;
  messageText += `üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${escapeHtml(formData.contact)}\n`;

  if (formData.package) {
    messageText += `üì¶ <b>–ü–∞–∫–µ—Ç:</b> ${escapeHtml(formData.package)}\n`;
  }

  if (formData.message?.trim()) {
    messageText += `\nüí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${escapeHtml(formData.message)}\n`;
  }

  messageText += `\n‚è∞ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU', {
    timeZone: 'Asia/Yekaterinburg',
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  })}`;

  const siteUrl: string = import.meta.env.PUBLIC_SITE_URL || 'https://promo.svobodinaphoto.ru';
  messageText += `\n\nüåê <a href="${siteUrl}">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç</a>`;

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: YOUR_USER_ID,
        text: messageText,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      }),
    });

    const data: { ok: boolean; [key: string]: any } = await response.json();

    if (data.ok) {
      return {
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
      };
    } else {
      console.error('Telegram API error:', data);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram.',
      };
    }
  } catch (error) {
    console.error('Network error:', error);
    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram.',
    };
  }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
function escapeHtml(text: string): string {
  const map: Record<string, string> = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#039;',
  };
  return text.replace(/[&<>"']/g, (m) => map[m]);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
 */
export async function getChatId(botToken: string): Promise<number | null> {
  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/getUpdates`);
    const data: { ok: boolean; result: any[] } = await response.json();

    if (data.ok && data.result.length > 0) {
      const lastUpdate = data.result[data.result.length - 1];
      if (lastUpdate.message?.chat?.id) {
        return lastUpdate.message.chat.id;
      }
    }

    return null;
  } catch (error) {
    console.error('Error getting chat_id:', error);
    return null;
  }
}
